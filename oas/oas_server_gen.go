// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateCluster implements createCluster operation.
	//
	// POST /clusters/
	CreateCluster(ctx context.Context, req *Cluster) (*Cluster, error)
	// DeleteCluster implements deleteCluster operation.
	//
	// DELETE /clusters/{cluster_id}
	DeleteCluster(ctx context.Context, params DeleteClusterParams) error
	// GetCluster implements getCluster operation.
	//
	// GET /clusters/{cluster_id}
	GetCluster(ctx context.Context, params GetClusterParams) (*Cluster, error)
	// ListClusters implements listClusters operation.
	//
	// GET /clusters/
	ListClusters(ctx context.Context) ([]Cluster, error)
	// UpdateCluster implements updateCluster operation.
	//
	// PUT /clusters/{cluster_id}
	UpdateCluster(ctx context.Context, req *Cluster, params UpdateClusterParams) error
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
